#!/usr/bin/env bash

program_name="$(basename "$0")"

usage() {
printf "%s" "\
usage: $program_name <command>

commands:
    create <wid>            create new tabbed container and add window <wid>.
    attach <wid0> <wid1>    attach window <wid0> to tabbed container <wid1> (if
                            it isn't one, create it first).
    detach <wid>            detach active window from tabbed container <wid>.
    autoattach <wid>        toggle autoattach new windows to tabbed container
                            <wid> (enabled by default).
"

exit 1
}

# shellcheck disable=SC2086,SC2048
trim_all() {
    # Usage: trim_all "   example   string    "
    set -f
    set -- $*
    printf '%s\n' "$*"
    set +f
}

split() {
    # Usage: split "string" "delimiter" "field"
    IFS=$'\n' read -d "" -ra arr <<< "${1//$2/$'\n'}"
    printf '%s\n' "${arr[$3]}"
}

trim_quotes() {
    # Usage: trim_quotes "string"
    : "${1//\'}"
    printf '%s\n' "${_//\"}"
}

head() {
    # Usage: head "n" "file"
    mapfile -tn "$1" line < "$2"
    printf '%s\n' "${line[@]}"
}

get_root_wid() {
	awk '/Window id:/{print $4}' <(xwininfo -root)
}

get_children() {
	id=$1

	awk '$1 ~ /0x.*/{print $1}' <(xwininfo -id "$id" -children)
}

get_children_no() {
    id=$1

    awk '$2 ~ /child|children/{print $1}' <(xwininfo -id "$id" -children)
}

get_class() {
	id=$1

    class="$(xprop -id "$id" 8s '\t$0' WM_CLASS)"
    class="$(trim_all "$class")"
    class="$(split "$class" " " 1)"
    trim_quotes "$class"
}

node_is_window() {
    id=$1

    bspc query -N -n "$id".window &> /dev/null
}

create() {
    id=$1

    if ! node_is_window "$id"; then
        printf "error: node is not a window\n" >&2
        exit 1
    fi

    if [[ "$(get_class "$id")" == "tabbed" ]]; then
        printf "error: window is a tabbed container\n" >&2
        exit 1
    fi

    bspc config -n "$id" border_width 0

    tabbedid=$(tabbed -c -d -k) 

    xdotool windowreparent "$id" "$tabbedid"

    tabbedid0=$(bspc query -N -n)

    tabbed-sub "$tabbedid0" &
    tabbed-unsub "$tabbedid0" &
}

detach() {
    id=$1

    if ! node_is_window "$id"; then
        printf "error: node is not a window\n" >&2
        exit 1
    fi

    if [[ "$(get_class "$id")" != "tabbed" ]]; then
        printf "error: window is not a tabbed container\n" >&2
        exit 1
    fi

    tabbedsub_parentpx=$(pgrep -fo "tabbed-sub $id")

    if [[ -n $tabbedsub_parentpx ]]; then
        tabbedsub_px=$(pgrep -P "$tabbedsub_parentpx" -f "bspc")
        kill "$tabbedsub_px"
    fi

    children_no=$(get_children_no "$id")
    childid=$(head 1 <(get_children "$id"))
    rootid=$(get_root_wid)

    xdotool windowreparent "$childid" "$rootid"

    children_no=$((children_no - 1))

    [[ $children_no -eq 0 ]] && return

    if [[ $children_no -le 10 ]]; then
        if [[ $children_no -eq 10 ]]; then
            xdotool key alt+0
            sleep 0.1
        fi

        for ((i=children_no; i>=1; --i)); do
            xdotool key alt+"$i"
            sleep 0.1
        done
    fi

    childrenid=$(get_children "$id")

    if [[ -n $childrenid ]]; then
        newtabbedid=$(tabbed -c -d -k)

        for child in $childrenid; do
            xdotool windowreparent "$child" "$rootid"
            bspc config -n "$child" border_width 0
        done

        for child in $childrenid; do
            xdotool windowreparent "$child" "$newtabbedid"
        done

        bspc node -s "$childid"

        newtabbedid0=$(bspc query -N -n)

        if [[ -n $tabbedsub_parentpx ]]; then
            tabbed-sub "$newtabbedid0" &
            tabbed-unsub "$newtabbedid0" &
        fi

        bspc node -f "$childid"
    fi
}

attach() {
    focusedid=$1
    otherid=$2

    if [[ -z $otherid ]]; then
        printf "error: id of window to attach not specified\n" >&2
        exit 1
    fi

    if ! node_is_window "$focusedid"; then
        printf "error: first node is not a window\n" >&2
        exit 1
    fi

    if ! node_is_window "$otherid"; then
        printf "error: second node is not a window\n" >&2
        exit 1
    fi

    if [[ "$(get_class "$focusedid")" == "tabbed" ]]; then
        detach "$focusedid"
        focusedid=$(bspc query -N -n)
    fi

    if [[ "$(get_class "$otherid")" != "tabbed" ]]; then
        bspc node -f "$otherid"
        create "$otherid"
    else
        tabbedid=$otherid
    fi

    bspc config -n "$focusedid" border_width 0

    xdotool windowreparent "$focusedid" "$tabbedid"

    bspc node -f "$tabbedid"
}

autoattach() {
    id=$1

    if ! node_is_window "$id"; then
        printf "error: node is not a window\n" >&2
        exit 1
    fi

    if [[ "$(get_class "$id")" != "tabbed" ]]; then
        printf "error: window is not a tabbed container\n" >&2 
        exit 1
    fi

    tabbedsub_parentpx=$(pgrep -fo "tabbed-sub $id")
    tabbedunsub_parentpx=$(pgrep -fo "tabbed-unsub $id")

    if [[ -z $tabbedsub_parentpx ]]; then
        if [[ -z $tabbedunsub_parentpx ]]; then
            tabbed-sub "$id" &
            tabbed-unsub "$id" &
        else
            printf "error: subscription process found, but unsubscription process not found\n" >&2

            tabbedsub_px=$(pgrep -P "$tabbedsub_parentpx" -f "bspc")

            kill "$tabbedsub_px"

            exit 1
        fi
    else
        if [[ -z $tabbedsub_parentpx ]]; then
            printf "error: unsubscription process found, but subscription process not found\n" >&2

            tabbedunsub_px=$(pgrep -P "$tabbedunsub_parentpx" -f "bspc")

            kill "$tabbedunsub_px"

            exit 1
        else
            tabbedsub_px=$(pgrep -P "$tabbedsub_parentpx" -f "bspc")
            tabbedunsub_px=$(pgrep -P "$tabbedunsub_parentpx" -f "bspc")

            kill "$tabbedsub_px"
            kill "$tabbedunsub_px"
        fi
    fi
}

get_command() {
    case "$1" in
        create)
            shift
            create "$@"
        ;;
        attach)
            shift
            attach "$@"
        ;;
        detach)
            shift
            detach "$@"
        ;;
        autoattach)
            shift
            autoattach "$@"
        ;;
        *)
            usage
        ;;
    esac
}

main() {
    [[ "$#" -le 1 ]] && usage

    get_command "$@"

    return 0
}

main "$@"
